import pandas as pd
import numpy as np

# Internal imports
import save
import utils
from BlockSim.Main import blocksim
from visualization.graph import generate_graphs

def simulator(dir_results, input_file, runs, variants_by_module):

    simulator_directory = save.create_simulator_directory(
        root_directory=dir_results
    )

    output_blocksim=f"{simulator_directory}/blocksim-{runs}x.csv"

    blocksim(input_file=input_file, output_file=output_blocksim, runs=runs)
    
    try:
        df = pd.read_csv(output_blocksim)
    except FileNotFoundError as e:
        print(f"Error: {e}")
        return

    df_simulator_mean_std = utils.compute_mean_std(
        df=df, 
        group_by='variant',
        columns=["verify"],
    )

    print("\nFiles generated by simulations in BlockSim:")
    path_csv = f"{simulator_directory}/blocksim-mean-std.csv"
    df_simulator_mean_std.to_csv(path_csv)
    print(output_blocksim)
    print(path_csv)
    
    combined_mechanisms = {}
    for algorithm in variants_by_module.values():
        combined_mechanisms.update(algorithm)

    # Generates the simulator graphs
    generate_graphs(
        path_csv=path_csv,
        dir_results=simulator_directory,
        mechanisms_dict=combined_mechanisms,
        columns=[
            # ("mean_keypair", "std_keypair", "Geração de chaves"),
            # ("mean_sign", "std_sign", "Assinatura"),
            ("mean_verify", "std_verify", "Verificação"),
        ],
        values_offset=0.2,
        error_offset=1.05,
        log_xticks=np.logspace(-2, 4, num=7, base=10),
        log_xlim=(1e-2, 1e4),
    )